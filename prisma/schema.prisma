// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id String @id
  username String @unique
  avatar String?
  cover String?
  name String?
  surnname String?
  description String?
  city String?
  school String?
  work String?
  website String?  
  createdAt DateTime @default(now())
  posts  Post[]
  likes Like[]
  comments Comment[]
  follower Follower[] @relation("userFollowers")
  following Follower[] @relation("userFollowings")
  followRequestSent FollowRequest[] @relation("followingRequestSent")
  followRequestReceived FollowRequest[] @relation("followingRequestReceived")
  blocks Block[] @relation("blockSent") 
  blocksBy Block[] @relation("blockReceived") 
  stories Story[]
}



model Post{
  id Int @id @default(autoincrement())
  desc String
  img String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  user User @relation(fields: [userId], references: [id],onDelete: Cascade )
  userId String
  comments Comment[]
  like   Like[]
}

model Comment{
  id Int @id @default(autoincrement())
  desc String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  user User @relation(fields: [userId], references: [id],onDelete: Cascade )
  userId String
  post Post @relation(fields: [postId], references: [id],onDelete: Cascade )
  postId Int
  likes Like[]
 
}


model Like{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id],onDelete: Cascade )
  userId String
  post Post? @relation(fields: [postId], references: [id],onDelete: Cascade )
  postId Int?
  comment Comment? @relation(fields: [commentId], references: [id],onDelete: Cascade )
  commentId Int?


}


model Follower{

  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  follower User @relation("userFollowers",fields: [followerId], references: [id],onDelete: Cascade )
  followerId String

  following User @relation("userFollowings",fields: [followingId], references: [id],onDelete: Cascade )
  followingId String

  @@unique([followerId,followingId])

}

model FollowRequest{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  sender User @relation("followingRequestSent",fields: [senderId], references: [id],onDelete: Cascade )
  senderId String

  receiver User @relation("followingRequestReceived",fields: [receiverId], references: [id],onDelete: Cascade )
  receiverId String

  @@unique([senderId,receiverId])

}
model Block{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  blocker User @relation("blockSent",fields: [blockerId], references: [id],onDelete: Cascade )
  blockerId String
  blocked User @relation("blockReceived",fields: [blockedId], references: [id],onDelete: Cascade )
  blockedId String

  @@unique([blockerId,blockedId])

}

model Story{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime 
  user     User @relation(fields: [userId],references: [id],onDelete: Cascade )
  userId   String @unique
  image  String
}